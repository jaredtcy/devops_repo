pipeline {
  agent any
  stages {
    stage('One') {
      steps {
        echo 'Continue from previous phase: Ready to deploy next environment.'
      }
    }
    stage('Two') {
      steps {
        input('Do you want to update to UAT container?')
      }
    }
    stage('Three') {
      steps {
        withCredentials([string(credentialsId: 'github-token-id', variable: 'GIT_TOKEN')]) {
          sh '''#!/bin/bash
          puppet resource file /tmp/clone ensure=absent force=true;
          puppet resource file /tmp/clone ensure=directory;
          cd /tmp/clone;
          # Use the GitHub token for authentication
          git clone https://$GIT_TOKEN@github.com/jaredtcy/devops_repo.git || { echo "Git clone failed"; exit 1; }

          # Check if repo was cloned successfully
          if [ -d "/tmp/clone/devops_repo" ]; then
            echo "Repository cloned successfully."
          else
            echo "Git clone failed. Exiting..."
            exit 1
          fi

          targets=puppetclient1.localdomain;
          locate_script='/tmp/clone/devops_repo/script_to_run';
          bolt script run $locate_script -t $targets -u clientadm -p user123 --no-host-key-check --run-as root;
          '''
        }
        echo "UAT container updated"
      }
    }
    stage('Four') {
      steps {
        input('Do you want to deploy to Production container?')
      }
    }
    stage('Five') {
      steps {
        withCredentials([string(credentialsId: 'github-token-id', variable: 'GIT_TOKEN')]) {
          sh '''#!/bin/bash
          targets=puppetclient2.localdomain;
          locate_script='/tmp/clone/devops_repo/script_to_run';
          bolt script run $locate_script -t $targets -u clientadm -p user123 --no-host-key-check --run-as root;
          '''
        }
        echo "Production container updated"
      }
    }
    stage('Completed updating Operation') {
      steps {
        echo 'Completed updating to Production Container'
      }
    }
  }
}
